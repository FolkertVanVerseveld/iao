#importonce

#import "zeropage.inc"

//------------------------------------
// Basic commands
//------------------------------------
.pseudocommand add arg {
	clc
	adc arg
}

.pseudocommand sub arg {
	sec
	sbc arg
}

.pseudocommand mov arg1:arg2 {
	lda arg1
	sta arg2
}

.pseudocommand mov16 src:tar {
	lda src
	sta tar
	lda _16bit_nextArgument(src)
	sta _16bit_nextArgument(tar)
}

.function _16bit_nextArgument(arg) {
	.if (arg.getType()==AT_IMMEDIATE) .return CmdArgument(arg.getType(),>arg.getValue())
	.return CmdArgument(arg.getType(),arg.getValue()+1)
}

//------------------------------------
// Irq commands
//------------------------------------
.pseudocommand cia_nmi {
	pha
	txa
	pha
	tya
	pha
}

.pseudocommand imn_aic {
	pla
	tay
	pla
	tax

	lda $dd0d
	pla
	rti
}

.pseudocommand irq {
	pha // 3, 3
	txa // 2, 5
	pha // 3, 8
	tya // 2, 10
	pha // 3, 13
	mov #$ff : $d019 // 8, 21
}

.pseudocommand qri line : addr {
	.if (line.getType()!=AT_NONE) 	mov line : $d012
	.if (addr.getType()!=AT_NONE) 	mov16 addr : $fffe
	pla
	tay
	pla
	tax
	pla
	rti
}

.pseudocommand qri2 line : addr {
	mov line : $d012

	.if (line.getValue() > 255) {
		lda $d011
		ora #$80
		sta $d011
	} else {
		lda $d011
		and #$7f
		sta $d011
	}

	mov16 addr : $fffe
	pla
	tay
	pla
	tax
	pla
	rti
}

// border color stuff

.macro borderColor(color) {
	lda #color
	sta $d020
}

.macro backgroundColor(color) {
	lda #color
	sta $d021
}

.macro storeDecVal(p5, p4, p3, p2, p1) {
	lda #p5
	sta dec_val
	lda #p4
	sta dec_val+1
	lda #p3
	sta dec_val+2
	lda #p2
	sta dec_val+3
	lda #p1
	sta dec_val+4
}

.macro mov_money_str16(screen_addr, coord_x, coord_y, monthly) {
	ldx #$ff
	ldy #0
!zero_loop:
	inx
	lda dec_char,x
	cmp #$30
    beq !zero_loop-
!copy_loop:
	lda dec_char,x
	sta screen_addr+coordToAddr(coord_x, coord_y),y
	iny
	inx
	cpx #5
	bne !copy_loop-
	lda #'k'
	sta screen_addr+coordToAddr(coord_x, coord_y),y

    .if (monthly) {
		lda #'/'
		sta screen_addr+coordToAddr(coord_x, coord_y)+1,y
		lda #'m'
		sta screen_addr+coordToAddr(coord_x, coord_y)+2,y
	}

	ldx #' '
	// y contains position of 'K'
	lda #0
	clc
!branch_modify_loop:
	adc #3
	dey
	bne !branch_modify_loop-
	sta 1+!branch+
	clv
!branch:
	bvc !fill_spaces+
!fill_spaces:
	.if (monthly) {
		.for (var i = 1; i < 6; i++) {
			stx screen_addr+coordToAddr(coord_x + i, coord_y)+2
		}
	} else {
		.for (var i = 1; i < 6; i++) {
			stx screen_addr+coordToAddr(coord_x + i, coord_y)
		}
	}
}

.function coordToAddr(x, y) {
	.return y*40 + x
}
